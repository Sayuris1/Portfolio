local camera = require "orthographic.camera"

camera.ORTHOGRAPHIC_RENDER_SCRIPT_USED = true

local IDENTITY = vmath.matrix4()

function init(self)
    -- Tile that doesn't get effected from shockwave
	self.tile_pred = render.predicate({"tile"})
    self.blur_pred = render.predicate({"blur"}) -- Screen space blur
    self.star_pred = render.predicate({"star"})
    self.shock_pred = render.predicate({"shock"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)

    local color_params = { format = render.FORMAT_RGBA,
                           width = render.get_window_width(),
                           height = render.get_window_height(),
                           min_filter = render.FILTER_LINEAR,
                           mag_filter = render.FILTER_LINEAR,
                           u_wrap = render.WRAP_CLAMP_TO_EDGE,
                           v_wrap = render.WRAP_CLAMP_TO_EDGE }

    self.horizantal_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})
    self.vertical_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})
    self.shock_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})
end

function update(self)
	-- Clear default target
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})
	
	-- Set blend state
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

    -- Set world view_proj and viewport
	local viewport = camera.get_viewport()
	render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
	render.set_view(camera.get_view())
	render.set_projection(camera.get_projection())
    
    -- Change buffer to blur target
    render.set_render_target_size(self.horizantal_target, viewport.z, viewport.w)
    render.set_render_target(self.horizantal_target)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

    -- Clear blur target
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

    -- Draw to blur target
    -- Only blur tiles
	render.draw(self.tile_pred)

    render.set_render_target_size(self.vertical_target, viewport.z, viewport.w)
    render.set_render_target(self.vertical_target)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color})

    local vertical = render.constant_buffer()
    vertical.u_dir = vmath.vector4(0, 1, 0, 0)

    -- Change quat to screen space
	render.set_view(IDENTITY)
    render.set_projection(vmath.matrix4())

    render.enable_texture(0, self.horizantal_target, render.BUFFER_COLOR_BIT)
    render.draw(self.blur_pred, vertical)
    render.disable_texture(0)

    -- Blur draw end

    -- Change quat to screen space
	render.set_view(IDENTITY)
    render.set_projection(vmath.matrix4())

    -- Change buffer to shock target
    render.set_render_target_size(self.shock_target, viewport.z, viewport.w)
    render.set_render_target(self.shock_target)

    -- Draw starfield
    render.draw(self.star_pred)

    render.enable_texture(0, self.vertical_target, render.BUFFER_COLOR_BIT)
    render.draw(self.blur_pred)
    render.disable_texture(0)

    -- Set world view_proj
	render.set_view(camera.get_view())
	render.set_projection(camera.get_projection())

    -- Draw normal
    render.draw(self.tile_pred)
    -- Shock target end

    -- Draw to screen
    render.set_render_target(render.RENDER_TARGET_DEFAULT)

    -- Change quat to screen space
	render.set_view(IDENTITY)
    render.set_projection(vmath.matrix4())

    -- Draw shock effect end effected things
    render.enable_texture(0, self.shock_target, render.BUFFER_COLOR_BIT)
	render.draw(self.shock_pred)
    render.disable_texture(0)
end