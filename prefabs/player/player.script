local camera = require "orthographic.camera"

local TOUCH = hash("touch")

function init(self)
	msg.post(".", "acquire_input_focus")

    go.property("speed", 500)
    go.property("max_speed", 500)

    -- Movement variables
    self.pos_current = go.get_position()
    self.velocity = vmath.vector3(0)
    self.steering = vmath.vector3(0)

    -- Rotate
    self.pos_mouse = vmath.vector3(0)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
    -- Kinematic movement
    self.velocity = self.velocity + self.steering * dt * self.speed
    self.pos_current = self.pos_current + self.velocity * dt
    go.set_position(self.pos_current)

    if vmath.length_sqr(self.velocity) > self.max_speed * self.max_speed then
        self.velocity = vmath.normalize(self.velocity) * self.max_speed
    end

    -- Reset steering to stop moving after mouse release
    self.steering.x = 0; self.steering.y = 0

    -- Rotate to mouse
    local rotate_angle = math.atan2(self.pos_mouse.x - self.pos_current.x, self.pos_mouse.y - self.pos_current.y)
    go.set_rotation(vmath.quat_rotation_z(-rotate_angle))
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == TOUCH then
        local world = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
        self.steering = vmath.normalize(world - self.pos_current)

    -- Mouse movement have action_id == nil
    else
        self.pos_mouse = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
    end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
