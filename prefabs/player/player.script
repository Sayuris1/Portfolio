local camera = require "orthographic.camera"

local TOUCH = hash("touch")

local TRIGGER = hash("trigger_response")
local COLLISION = hash("contact_point_response")

function init(self)
    go.property("speed", 0.01)
    go.property("max_speed", 50)

    -- Cloud variables
    self.time = 0

    -- Movement variables
    self.pos_current = go.get_position()
    self.current_speed = 0
    self.steering = vmath.vector3(0)

    self.dash = true

    -- Rotate
    self.pos_mouse = vmath.vector3(2370, -10, 0)

    self.profiler = false
end

function update(self, dt)
    self.pos_current = go.get_position()
    -- Kinematic movement
    -- Slow down when close to the mouse pos
    local follow_dist = self.pos_mouse - self.pos_current
    self.current_speed = self.speed * vmath.length_sqr(follow_dist) * dt 

    local dir = self.steering * self.current_speed
    self.pos_current = self.pos_current + dir

    -- We update pos_mouse only if mouse moves
    -- Need to update it again when ship moves
    self.pos_mouse = self.pos_mouse + dir

    go.set_position(self.pos_current)
   
    -- When going fast
    if vmath.length_sqr(dir) > 150 then
        -- Animate trail color to red
        go.animate("/player_trail#trail_model", "u_color", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 0, 0, 1), go.EASING_OUTEXPO, 0.5)
        -- Play dash animation
        -- If it's not playing
        if self.dash then
            self.dash = false

            -- Shockwave
            local shock_timer
            if is_shock then
                self.time = 0
                local pos = camera.world_to_screen(nil, self.pos_current)
                shock_timer = timer.delay(0.0, true, function (self, delay)
                    -- Set shader constant
                    self.time = self.time + 0.01
                    go.set("/shockwave#quad", "u_in", vmath.vector4(pos.x, pos.y, self.time, 0))
                end)
            end
           
            -- Ship animate
            go.animate("/player_sprite", "scale", go.PLAYBACK_ONCE_PINGPONG, vmath.vector3(0), go.EASING_LINEAR, 0.1, 0, function ()
                go.animate("/player_sprite", "scale", go.PLAYBACK_ONCE_PINGPONG, vmath.vector3(0.5, 2, 1), go.EASING_LINEAR, 0.3, 0, function ()
                end)
            end)
            
            local dash = factory.create("#dash", nil, go.get_rotation(), nil, vmath.vector3(0.2))
            local url = msg.url(dash); url.fragment = "sprite"
            -- Ghost animate
            go.animate(dash, "position", go.PLAYBACK_ONCE_FORWARD, self.pos_current, go.EASING_LINEAR, 1)

            -- Set dissolve shader constant
            -- We can use go.animate
            go.animate(url, "u_time.x", go.PLAYBACK_ONCE_FORWARD, 1.8, go.EASING_LINEAR, 1.5, 0.0, function() 
                go.delete(dash)

                -- Stop shockwave
                if shock_timer then
                    timer.cancel(shock_timer)
                end
                go.set("/shockwave#quad", "u_in", vmath.vector4(0, -100000, 0, 0))

                -- Can dash again
                self.dash = true
            end)

            -- Dash_fx animate
            local dash_fx = factory.create("#dash_fx", go.get_position(), go.get_rotation(), nil, vmath.vector3(0))
            local url = msg.url(dash_fx); url.fragment = "sprite"
            go.animate(dash_fx, "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0.6), go.EASING_OUTBACK, 1)

            -- Set dissolve shader constant
            go.animate(url, "u_time.x", go.PLAYBACK_ONCE_FORWARD, 1.8, go.EASING_LINEAR, 2.5)
        end

    -- When going slow
    -- Animate trail color to blue
    else
        go.animate("/player_trail#trail_model", "u_color", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0, 0, 1, 1), go.EASING_OUTEXPO, 1.5)
    end

    -- Rotate to mouse
    local rotate_angle = math.atan2(follow_dist.x, follow_dist.y)
    local rotate_quat = vmath.quat_rotation_z(-rotate_angle)
    go.set_rotation(rotate_quat)
    
    -- Trail
    -- Need to reset child rotation. Trail rotates itself in the shader
    go.set_rotation(vmath.quat_rotation_z(rotate_angle), "/player_trail")
end

function on_message(self, message_id, message, sender)
	if message_id == TRIGGER then
        if message.group == hash("sign") then
            msg.post("/signs#collisionobject", "disable")
        elseif message.enter and message.group ~= hash("box") then
            local collision = msg.url(message.other_id)
            collision.fragment = "collisionobject"
            msg.post(collision, "disable")

            local duration = 0.2
            local pos_particle = go.get_position(message.other_id)
            local to = pos_particle + self.steering * math.min(self.current_speed * 3, 100)
            to.z = pos_particle.z

            local url = msg.url(go.get_parent(message.other_id))
            url.fragment = "script"

            if message.group == hash(1) then
                go.animate(url, "pos_1", go.PLAYBACK_ONCE_PINGPONG, to, go.EASING_OUTQUAD, duration, 0, function ()
                    msg.post(collision, "enable")
                end)
            elseif message.group == hash(2) then
                go.animate(url, "pos_2", go.PLAYBACK_ONCE_PINGPONG, to, go.EASING_OUTQUAD, duration, 0, function ()
                    msg.post(collision, "enable")
                end)
            elseif message.group == hash(3) then
                go.animate(url, "pos_3", go.PLAYBACK_ONCE_PINGPONG, to, go.EASING_OUTQUAD, duration, 0, function ()
                    msg.post(collision, "enable")
                end)
            end
        end

    elseif message_id == COLLISION then
        -- Ship is kinematic
        -- We need to apply force to dinamic objects
        local url = msg.url(message.other_id)
        url.fragment = "collisionobject"

        local force = self.current_speed * -message.normal * 300
        msg.post(url, "apply_force", {force = force , position = message.position})
    end
end

function on_input(self, action_id, action)
	if action_id == TOUCH then
        -- Get mouse pos to slow down when close
        self.pos_mouse = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))

        -- Get move direction
        local distance = self.pos_mouse - self.pos_current; distance.z = 0
        self.steering = vmath.normalize(distance)

        -- Reset steering to stop moving after mouse release
        if action.released then
            self.steering.x = 0; self.steering.y = 0
        end

    -- Mouse movement have action_id == nil
    else
        self.pos_mouse = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
    end
end