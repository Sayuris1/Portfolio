local camera = require "orthographic.camera"
local cursor = require "in.cursor"

local function anim(self)
    if self.is_over then
        local anim_id = factory.create("#factory", go.get_position(), go.get_rotation(), nil, vmath.vector3(0.25))
        self.active_id = anim_id
        go.animate(anim_id, "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0.3), go.EASING_OUTBACK, 0.5, 0, function ()
            self.anim_timer = timer.delay(0.3, false, anim)

            go.animate(anim_id, "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0.25), go.EASING_INBACK, 0.5, 0, function ()
                go.delete(anim_id)
            end)
        end)
    end
end

function init(self)
    self.is_over = false
    self.time = 0

    go.set("/star#quad", "tint.w", 0)
    go.set("/go#sprite", "tint.w", 0)
    go.set("/go1#sprite", "tint.w", 0)
    go.set("/go2#sprite", "tint.w", 0)

    go.set("/go3#sprite", "tint.w", 0)
end

function on_message(self, message_id, message, sender)
    if message_id == cursor.OVER then
        self.is_over = true
        anim(self)
    elseif message_id == cursor.OUT then
        self.is_over = false
    elseif message_id == cursor.PRESSED then
        self.is_over = false

        msg.post("#collisionobject", "disable")

        go.animate("/star#quad", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 5)
        go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function ()
            go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(), go.EASING_OUTSINE, 1, 0, function ()
                msg.post("/player#script", "acquire_input_focus")
                msg.post("/signs#first_move", "acquire_input_focus")
                go.delete()

                go.animate("/go#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCUBIC, 1.5)
                go.animate("/go3#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTCUBIC, 1.5)
                go.animate("/go1#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_INCUBIC, 1.0)
                go.animate("/go1", "position.y", go.PLAYBACK_LOOP_PINGPONG, -50, go.EASING_INBACK, 1)
            end)

            is_shock = true
        end)

        -- Shockwave
        local pos = camera.world_to_screen(nil, go.get_position())
        self.shock_timer = timer.delay(0.0, true, function (self, delay)
            -- Set shader constant
            self.time = self.time + 0.01
            if self.time > 0.8 then
                timer.cancel(self.shock_timer)
            end
            go.set("/shockwave#quad", "u_in", vmath.vector4(pos.x, pos.y, self.time, 0))
        end)
    end
end